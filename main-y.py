# Obfuscated with PyObfuscate
# https://www.github.com/ALI-JUTT
# Time : Wed Sep  4 12:32:19 2024
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)('='))